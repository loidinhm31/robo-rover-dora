nodes:
  - id: audio-capture
    build: cargo build --release -p audio_capture
    path: target/release/audio_capture
    inputs:
      tick: dora/timer/millis/50  # 20 Hz (~50ms audio chunks)
      audio_control: web-bridge/audio_command
    outputs:
      - audio  # Float32 audio data with metadata (sample_rate, channels, format)
    env:
      SAMPLE_RATE: "16000"  # Hz (default: 16000)
      CHANNELS: "1"  # Mono (default: 1)
      CHUNK_SIZE: "800"  # Samples per chunk - 50ms at 16kHz (default: 800)

  # Speech recognizer - Whisper-based speech-to-text
  - id: speech-recognizer
    build: cargo build --release -p speech_recognizer
    path: target/release/speech_recognizer
    inputs:
      audio: audio-capture/audio
    outputs:
      - transcription  # SpeechTranscription with text, confidence, language
    env:
      RUST_LOG: info
      WHISPER_MODEL_PATH: "models/obj/ggml-tiny.bin"
      SAMPLE_RATE: "16000"  # Must match audio-capture
      BUFFER_DURATION_MS: "5000"  # 5 seconds of audio before transcription
      CONFIDENCE_THRESHOLD: "0.5"  # Minimum confidence to output
      ENERGY_THRESHOLD: "0.02"  # VAD threshold for detecting speech

  # Command parser - NLU with pattern matching
  - id: command-parser
    build: cargo build --release -p command_parser
    path: target/release/command_parser
    inputs:
      text: speech-recognizer/transcription
    outputs:
      - rover_command  # RoverCommand from parsed intent
      - tracking_command  # TrackingCommand for object tracking
      - camera_control  # CameraControl for camera on/off
      - feedback  # String feedback for web UI
    env:
      RUST_LOG: info
      CONFIDENCE_THRESHOLD: "0.7"  # Minimum confidence to execute command

  # GStreamer camera capture (outputs raw RGB8 frames)
  - id: gst-camera
#    git: https://github.com/kornia/dora-nodes-hub.git
#    rev: 5b309b6c6f95074f8d38f2a236142e2e0751ee19
    build: cargo build -p kornia_capture --release
    path: target/release/kornia_capture
    inputs:
      tick: dora/timer/millis/33  # ~30 FPS
      camera_control: web-bridge/camera_command
      camera_control_voice: command-parser/camera_control
    outputs:
      - frame  # Raw RGB8 frames with metadata
    env:
      # Local webcam source
      SOURCE_TYPE: "webcam"
      SOURCE_URI: "/dev/video0" # Device index (0 = default camera)
      IMAGE_COLS: "640"
      IMAGE_ROWS: "480"
      SOURCE_FPS: "30"

  # Object detector - YOLOv12n inference
  - id: object-detector
    build: cargo build --release -p object_detector
    path: target/release/object_detector
    inputs:
      frame: gst-camera/frame
    outputs:
      - detections  # DetectionFrame with bounding boxes, classes, confidence scores
    env:
      RUST_LOG: info
      MODEL_PATH: "models/obj/yolo12n.onnx"
      CONFIDENCE_THRESHOLD: "0.5"
      NMS_THRESHOLD: "0.4"
      TARGET_CLASSES: ""  # Optional: "person,dog,cat" or leave empty for all classes
      ORT_DYLIB_PATH: "/usr/local/lib/libonnxruntime.so"

  # Object tracker - SORT algorithm with Kalman filter
  - id: object-tracker
    build: cargo build --release -p object_tracker
    path: target/release/object_tracker
    inputs:
      detections: object-detector/detections
      tracking_command: web-bridge/tracking_command
      tracking_command_voice: command-parser/tracking_command
    outputs:
      - tracked_detections  # DetectionFrame with tracking IDs assigned
      - tracking_telemetry  # Current tracking state and selected target
    env:
      RUST_LOG: info
      MAX_TRACKING_AGE: "30"  # Max frames to keep lost tracks
      MIN_HITS: "3"  # Min detections before track is confirmed
      IOU_THRESHOLD: "0.3"  # Intersection over union threshold for matching

  # Visual servoing controller - PID-based autonomous tracking
  - id: visual-servo-controller
    build: cargo build --release -p visual_servo_controller
    path: target/release/visual_servo_controller
    inputs:
      tracking_telemetry: object-tracker/tracking_telemetry
    outputs:
      - servo_command  # RoverCommandWithMetadata for autonomous following
      - servo_telemetry  # Enhanced TrackingTelemetry with distance and control mode
    env:
      RUST_LOG: info
      # Lateral PID (centering control)
      LATERAL_PID_KP: "1.5"
      LATERAL_PID_KI: "0.0"
      LATERAL_PID_KD: "0.2"
      # Longitudinal PID (distance control)
      LONGITUDINAL_PID_KP: "0.8"
      LONGITUDINAL_PID_KI: "0.0"
      LONGITUDINAL_PID_KD: "0.15"
      # Safety constraints
      MIN_DISTANCE: "1.0"  # Meters
      MAX_VELOCITY: "0.5"  # m/s
      MAX_ANGULAR_VELOCITY: "1.0"  # rad/s
      # Control parameters
      TARGET_BBOX_HEIGHT: "0.3"  # Target 30% of frame height
      DEAD_ZONE: "0.05"  # 5% centering dead zone

  # Web bridge with binary streaming
  - id: web-bridge
    build: cargo build --release -p web_bridge
    path: target/release/web_bridge
    inputs:
      audio_frame: audio-capture/audio
      transcription: speech-recognizer/transcription
      command_feedback: command-parser/feedback
      video_frame: gst-camera/frame
      detections: object-detector/detections
      tracked_detections: object-tracker/tracked_detections
      tracking_telemetry: object-tracker/tracking_telemetry
      servo_telemetry: visual-servo-controller/servo_telemetry
      rover_telemetry: sim-interface/rover_telemetry
      arm_telemetry: sim-interface/arm_telemetry
    outputs:
      - arm_command
      - rover_command
      - camera_command
      - audio_command
      - tracking_command
    env:
      RUST_LOG: info
      SOCKETIO_PORT: 3030
      AUTH_USERNAME: "admin"
      AUTH_PASSWORD: "password"

  # Arm controller
  - id: arm-controller
    build: cargo build --release -p arm_controller
    path: target/release/arm_controller
    inputs:
      arm_command: web-bridge/arm_command
      arm_telemetry: sim-interface/arm_telemetry
    outputs:
      - processed_arm_command
    env:
      RUST_LOG: info
      ARM_CONFIG: config/arm_6dof.toml

  # Rover controller
  - id: rover-controller
    build: cargo build --release -p rover_controller
    path: target/release/rover_controller
    inputs:
      rover_command: web-bridge/rover_command
      rover_command_voice: command-parser/rover_command
      servo_command: visual-servo-controller/servo_command
      rover_telemetry: sim-interface/rover_telemetry
    outputs:
      - processed_rover_command
    env:
      RUST_LOG: info

  # Simulation interface
  - id: sim-interface
    build: cargo build --release -p sim_interface
    path: target/release/sim_interface
    inputs:
      arm_command: arm-controller/processed_arm_command
      rover_command: rover-controller/processed_rover_command
    outputs:
      - rover_telemetry
      - arm_telemetry
    env:
      RUST_LOG: info