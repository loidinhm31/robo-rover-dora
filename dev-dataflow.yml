nodes:
  # Microphone audio capture (outputs raw PCM audio)
  - id: dora-microphone
    build: pip install dora-microphone --break-system-packages
    path: dora-microphone
    inputs:
      tick: dora/timer/millis/50  # 20 Hz (~50ms audio chunks)
    outputs:
      - audio  # Raw PCM audio data with metadata

  # Keyboard input source
  - id: dora-keyboard
    build: pip install dora-keyboard
    path: dora-keyboard
    inputs:
      tick: dora/timer/millis/500
    outputs:
      - char

  # Central keyboard dispatcher
  - id: dispatcher-keyboard
    build: cargo build -p dispatcher_keyboard
    path: target/debug/dispatcher_keyboard
    inputs:
      keyboard: dora-keyboard/char
    outputs:
      - arm_command      # Commands for arm controller
      - rover_command    # Commands for rover controller
    env:
      RUST_LOG: info

  # Arm controller
  - id: arm-controller
    build: cargo build -p arm_controller
    path: target/debug/arm_controller
    inputs:
      arm_command: dispatcher-keyboard/arm_command          # From dispatcher
    outputs:
      - processed_arm_command
    env:
      RUST_LOG: info
      ARM_CONFIG: config/arm_6dof.toml
      ARM_SAFETY_ENABLED: "true"

  # Rover controller
  - id: rover-controller
    build: cargo build -p rover_controller
    path: target/debug/rover_controller
    inputs:
      rover_command: dispatcher-keyboard/rover_command      # From dispatcher
      rover_telemetry: sim-interface/rover_telemetry        # From simulation
    outputs:
      - processed_rover_command
    env:
      RUST_LOG: info

  # Simulation interface
  - id: sim-interface
    build: cargo build -p sim_interface
    path: target/debug/sim_interface
    inputs:
      arm_command: arm-controller/processed_arm_command      # From arm controller
      rover_command: rover-controller/processed_rover_command # From rover controller
    outputs:
      - rover_telemetry   # Rover status feedback to rover controller
      - arm_telemetry     # Arm status feedback to arm controller
    env:
      RUST_LOG: debug
      SOCKETIO_PORT: 4567
      UNITY_UPDATE_RATE: 60.0

  # Optional: Add rerun visualization (commented out for now)
  # - id: visualization
  #   build: pip install dora-rerun
  #   path: dora-rerun
  #   inputs:
  #     rover_telemetry: sim-interface/rover_telemetry
  #     arm_telemetry: sim-interface/arm_telemetry
  #   env:
  #     README: |
  #       # Robotic System Visualization
  #       This node visualizes both arm and rover states, trajectories,
  #       and joint configurations in real-time.
  #     RERUN_MEMORY_LIMIT: 25%
  #     VISUALIZE_ARM_WORKSPACE: "true"
  #     VISUALIZE_JOINT_LIMITS: "true"