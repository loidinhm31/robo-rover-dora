nodes:
  # Keyboard input source
  - id: dora-keyboard
    build: pip install dora-keyboard
    path: dora-keyboard
    inputs:
      tick: dora/timer/millis/500
    outputs:
      - char

  # Central keyboard dispatcher
  - id: interactive-keyboard
    build: cargo build -p interactive_keyboard
    path: target/debug/interactive_keyboard
    inputs:
      keyboard: dora-keyboard/char
    outputs:
      - arm_command      # Commands for arm controller
      - rover_command    # Commands for rover controller
    env:
      RUST_LOG: info

  # Arm controller
  - id: arm-controller
    build: cargo build -p arm_controller
    path: target/debug/arm_controller
    inputs:
      arm_command: interactive-keyboard/arm_command          # From dispatcher
      joint_feedback: sim-interface/joint_feedback          # From simulation
    outputs:
      - processed_arm_command
    env:
      RUST_LOG: info
      ARM_CONFIG: config/arm_6dof.toml

  # Rover controller
  - id: rover-controller
    build: cargo build -p rover_controller
    path: target/debug/rover_controller
    inputs:
      rover_command: interactive-keyboard/rover_command      # From dispatcher
      rover_telemetry: sim-interface/rover_telemetry        # From simulation
    outputs:
      - processed_rover_command
    env:
      RUST_LOG: info

  # Simulation interface
  - id: sim-interface
    build: cargo build -p sim_interface
    path: target/debug/sim_interface
    inputs:
      arm_command: arm-controller/processed_arm_command      # From arm controller
      rover_command: rover-controller/processed_rover_command # From rover controller
    outputs:
      - joint_feedback    # For arm controller
      - rover_telemetry   # For rover controller
    env:
      RUST_LOG: debug

  # Monitor node - observes all dataflow activity for debugging
  - id: monitor
    build: cargo build -p monitor
    path: target/debug/monitor
    inputs:
      keyboard: dora-keyboard/char                           # Original keyboard input
      dispatcher_arm: interactive-keyboard/arm_command       # Dispatcher arm output
      dispatcher_rover: interactive-keyboard/rover_command   # Dispatcher rover output
      arm_processed: arm-controller/processed_arm_command    # Processed arm commands
      rover_processed: rover-controller/processed_rover_command # Processed rover commands
      joint_feedback: sim-interface/joint_feedback          # Simulation feedback
      rover_telemetry: sim-interface/rover_telemetry        # Simulation telemetry
    env:
      RUST_LOG: debug

  # Optional: Add rerun visualization (commented out for now)
  # - id: visualization
  #   build: pip install dora-rerun
  #   path: dora-rerun
  #   inputs:
  #     joint_feedback: sim-interface/joint_feedback
  #     rover_telemetry: sim-interface/rover_telemetry
  #   env:
  #     README: |
  #       # Robotic System Visualization
  #       This node visualizes both arm and rover states and trajectories.
  #     RERUN_MEMORY_LIMIT: 25%